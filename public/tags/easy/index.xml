<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Easy on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/easy/</link>
    <description>Recent content in Easy on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Mar 2025 20:21:57 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>206. Reverse Linked List - LeetCode</title>
      <link>http://localhost:1313/posts/206.reverselinkedlist/</link>
      <pubDate>Wed, 26 Mar 2025 20:21:57 +0100</pubDate>
      <guid>http://localhost:1313/posts/206.reverselinkedlist/</guid>
      <description>Problem Description Given the head of a singly linked list, reverse the list, and return the reversed list.&#xA;Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Example 2: Input: head = [1,2] Output: [2,1] My Idea The idea here is to traverse the linked list and for every element reverse the direction of the link.&#xA;My solution from typing import Optional # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.</description>
    </item>
    <item>
      <title>141. Linked List Cycle - LeetCode</title>
      <link>http://localhost:1313/posts/141.linkedlistcycle/</link>
      <pubDate>Wed, 26 Mar 2025 20:20:11 +0100</pubDate>
      <guid>http://localhost:1313/posts/141.linkedlistcycle/</guid>
      <description>Problem Description Given head, the head of a linked list, determine if the linked list has a cycle in it.&#xA;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&amp;rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.</description>
    </item>
    <item>
      <title>21. Merge Two Soted Lists - LeetCode</title>
      <link>http://localhost:1313/posts/21.mergetwosotedlists/</link>
      <pubDate>Wed, 26 Mar 2025 20:17:02 +0100</pubDate>
      <guid>http://localhost:1313/posts/21.mergetwosotedlists/</guid>
      <description>Problem Description You are given the heads of two sorted linked lists list1 and list2.&#xA;Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.&#xA;Return the head of the merged linked list.&#xA;Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [0] Output: [0] My Idea The idea here is to check which element has a lower value and set it as the next one in the list.</description>
    </item>
    <item>
      <title>121. Best Time to Buy and Sell Stock - LeetCode</title>
      <link>http://localhost:1313/posts/121.besttimetobuyandsellstock/</link>
      <pubDate>Thu, 06 Mar 2025 13:33:46 +0100</pubDate>
      <guid>http://localhost:1313/posts/121.besttimetobuyandsellstock/</guid>
      <description>Problem Description You are given an array prices where prices[i] is the price of a given stock on the i-th` day.&#xA;You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.&#xA;Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.&#xA;Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</description>
    </item>
    <item>
      <title>704. Binary Search - LeetCode</title>
      <link>http://localhost:1313/posts/704.binarysearch/</link>
      <pubDate>Tue, 25 Feb 2025 15:18:49 +0100</pubDate>
      <guid>http://localhost:1313/posts/704.binarysearch/</guid>
      <description>Problem Description Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.&#xA;You must write an algorithm with O(log n) runtime complexity.&#xA;Example 1: Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Example 2: Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 My Idea The idea here is to implement the basic version of binary search, where we compare with the middle element and depending on weather it&amp;rsquo;s value is &amp;gt; or &amp;lt; than our target we restrict our problem space to the left or right half of the array respectively.</description>
    </item>
    <item>
      <title>125. Valid Palindrome - Leet Code</title>
      <link>http://localhost:1313/posts/125.validpalindrome/</link>
      <pubDate>Tue, 08 Oct 2024 15:14:48 +0200</pubDate>
      <guid>http://localhost:1313/posts/125.validpalindrome/</guid>
      <description>Problem Description A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.&#xA;Given a string s, return true if it is a palindrome, or false otherwise.&#xA;Example 1: Input: s = &amp;quot;A man, a plan, a canal: Panama&amp;quot; Output: True Explanation: &amp;ldquo;amanaplanacanalpanama&amp;rdquo; is a palindrome. Example 2: Input: s = &amp;quot;race a car&amp;quot; Output: false Explanation: &amp;ldquo;raceacar&amp;rdquo; is not a palindrome.</description>
    </item>
    <item>
      <title>20. Valid Parentheses - LeetCode</title>
      <link>http://localhost:1313/posts/20.validparentheses/</link>
      <pubDate>Fri, 09 Aug 2024 21:23:04 +0200</pubDate>
      <guid>http://localhost:1313/posts/20.validparentheses/</guid>
      <description>Problem Description Given a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.&#xA;An input string is valid if:&#xA;Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.&#xA;Example 1: Input: s = &amp;quot;()&amp;quot; Output: True Example 2: Input: s = &amp;quot;()[]{}&amp;quot; Output: True Example 3: Input: s = &amp;quot;(]&amp;quot; Output: False My Idea The idea here is to use a list as a stack, taking advantage of the LIFO strategy.</description>
    </item>
    <item>
      <title>242. Valid Anagram - LeetCode</title>
      <link>http://localhost:1313/posts/242.validanagram/</link>
      <pubDate>Mon, 22 Jul 2024 22:13:16 +0200</pubDate>
      <guid>http://localhost:1313/posts/242.validanagram/</guid>
      <description>Problem Description Given two strings s and t, return true if t is an anagram of s, and false otherwise.&#xA;An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.&#xA;Example 1: Input: s = &amp;quot;anagram&amp;quot;, t = &amp;quot;nagaram&amp;quot; Output: true Example 2: Input: s = rat&amp;quot;, t = &amp;quot;car&amp;quot; Output: false My Idea Since anagrams contain the same letters, my initial idea was to just sort the two strings and compare them.</description>
    </item>
    <item>
      <title>217. Contains Duplicate - LeetCode</title>
      <link>http://localhost:1313/posts/217.containsduplicate/</link>
      <pubDate>Mon, 22 Jul 2024 22:12:44 +0200</pubDate>
      <guid>http://localhost:1313/posts/217.containsduplicate/</guid>
      <description>Problem Description Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.&#xA;Example 1: Input: nums = [1,2,3,1] Output: true Example 2: Input: nums = [1,2,3,4] Output: false My Idea My initial idea was to iterate over the array and store key, value pairs for every element and its frequency. In the end i convert the frequencies to a set and add the value 1 to it.</description>
    </item>
    <item>
      <title>1. Two Sum - LeetCode</title>
      <link>http://localhost:1313/posts/1.twosum/</link>
      <pubDate>Mon, 22 Jul 2024 22:11:59 +0200</pubDate>
      <guid>http://localhost:1313/posts/1.twosum/</guid>
      <description>Problem Description Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.&#xA;You may assume that each input would have exactly one solution, and you may not use the same element twice.&#xA;You can return the answer in any order.&#xA;Example: Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</description>
    </item>
  </channel>
</rss>
