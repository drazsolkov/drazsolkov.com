<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LinkedList on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/linkedlist/</link>
    <description>Recent content in LinkedList on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Apr 2025 11:28:31 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linkedlist/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>23. Merge K Sorted Lists - LeetCode</title>
      <link>http://localhost:1313/posts/23.mergeksortedlists/</link>
      <pubDate>Tue, 01 Apr 2025 11:28:31 +0200</pubDate>
      <guid>http://localhost:1313/posts/23.mergeksortedlists/</guid>
      <description>Problem Description You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.&#xA;Merge all the linked-lists into one sorted linked-list and return it.&#xA;Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Example 2: Input: [] Output: [] My Idea My initial idea was to simply iterate over the list and merge the elements one by one. This yielded a time complexity of O(n*k). To optimize this approach we can go ahead and merge the list in twos until we get one list.</description>
    </item>
    <item>
      <title>146. LRU Cache - LeetCode</title>
      <link>http://localhost:1313/posts/146.lrucache/</link>
      <pubDate>Fri, 28 Mar 2025 16:11:01 +0100</pubDate>
      <guid>http://localhost:1313/posts/146.lrucache/</guid>
      <description>Problem Description Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.&#xA;Implement the LRUCache class:&#xA;LRUCache(int capacity) Initialize the LRU cache with positive size capacity. int get(int key) Return the value of the key if the key exists, otherwise return -1. void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.</description>
    </item>
    <item>
      <title>287. Find The Duplicate Number - LeetCode</title>
      <link>http://localhost:1313/posts/287.findtheduplicatenumber/</link>
      <pubDate>Fri, 28 Mar 2025 11:47:58 +0100</pubDate>
      <guid>http://localhost:1313/posts/287.findtheduplicatenumber/</guid>
      <description>Problem Description Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.&#xA;There is only one repeated number in nums, return this repeated number.&#xA;You must solve the problem without modifying the array nums and using only constant extra space.&#xA;Example 1: Input: nums = [1,3,4,2,2] Output: 2 Example 2: Input: nums = [3,1,3,4,2] Output: 3 My Idea The hard part here is figuring out that the array can be seen as a singly inked list, where the index is the value of the node and the value at this index is a pointer to the next node.</description>
    </item>
    <item>
      <title>2. Add Two Numbers - LeetCode</title>
      <link>http://localhost:1313/posts/2.addtwonumbers/</link>
      <pubDate>Fri, 28 Mar 2025 10:49:03 +0100</pubDate>
      <guid>http://localhost:1313/posts/2.addtwonumbers/</guid>
      <description>Problem Description You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.&#xA;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&#xA;Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Example 2: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] My Idea The idea here was to store the result in a new list res.</description>
    </item>
    <item>
      <title>138. Copy List With Random Pointer - LeetCode</title>
      <link>http://localhost:1313/posts/138.copylistwithrandompointer/</link>
      <pubDate>Fri, 28 Mar 2025 10:48:48 +0100</pubDate>
      <guid>http://localhost:1313/posts/138.copylistwithrandompointer/</guid>
      <description>Problem Description A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.&#xA;Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state.</description>
    </item>
    <item>
      <title>19. Remove N-th Node From End Of List - LeetCode</title>
      <link>http://localhost:1313/posts/19.removenthnodefromendoflist/</link>
      <pubDate>Fri, 28 Mar 2025 10:47:42 +0100</pubDate>
      <guid>http://localhost:1313/posts/19.removenthnodefromendoflist/</guid>
      <description>Problem Description Given the head of a linked list, remove the n-th node from the end of the list and return its head.&#xA;Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2: Input: head = [1,2], n = 1 Output: [1] My Idea The idea here is to use two pointer s and f. First we move f n+1 steps ahead of s, so that there is a n-node gap between s and f.</description>
    </item>
    <item>
      <title>143. Reorder List - LeetCode</title>
      <link>http://localhost:1313/posts/143.reorderlist/</link>
      <pubDate>Wed, 26 Mar 2025 20:31:09 +0100</pubDate>
      <guid>http://localhost:1313/posts/143.reorderlist/</guid>
      <description>Problem Description You are given the head of a singly linked-list. The list can be represented as:&#xA;$L_0 → L_1 → … → L_{(n - 1)} → L_n$&#xA;Reorder the list to be on the following form:&#xA;$L_0 → L_n → L_1 → L_{(n - 1)} → L_2 → L_{(n - 2)} → …$&#xA;You may not modify the values in the list&amp;rsquo;s nodes. Only nodes themselves may be changed.</description>
    </item>
    <item>
      <title>206. Reverse Linked List - LeetCode</title>
      <link>http://localhost:1313/posts/206.reverselinkedlist/</link>
      <pubDate>Wed, 26 Mar 2025 20:21:57 +0100</pubDate>
      <guid>http://localhost:1313/posts/206.reverselinkedlist/</guid>
      <description>Problem Description Given the head of a singly linked list, reverse the list, and return the reversed list.&#xA;Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Example 2: Input: head = [1,2] Output: [2,1] My Idea The idea here is to traverse the linked list and for every element reverse the direction of the link.&#xA;My solution from typing import Optional # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.</description>
    </item>
    <item>
      <title>141. Linked List Cycle - LeetCode</title>
      <link>http://localhost:1313/posts/141.linkedlistcycle/</link>
      <pubDate>Wed, 26 Mar 2025 20:20:11 +0100</pubDate>
      <guid>http://localhost:1313/posts/141.linkedlistcycle/</guid>
      <description>Problem Description Given head, the head of a linked list, determine if the linked list has a cycle in it.&#xA;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&amp;rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.</description>
    </item>
    <item>
      <title>21. Merge Two Sorted Lists - LeetCode</title>
      <link>http://localhost:1313/posts/21.mergetwosortedlists/</link>
      <pubDate>Wed, 26 Mar 2025 20:17:02 +0100</pubDate>
      <guid>http://localhost:1313/posts/21.mergetwosortedlists/</guid>
      <description>Problem Description You are given the heads of two sorted linked lists list1 and list2.&#xA;Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.&#xA;Return the head of the merged linked list.&#xA;Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [0] Output: [0] My Idea The idea here is to check which element has a lower value and set it as the next one in the list.</description>
    </item>
  </channel>
</rss>
