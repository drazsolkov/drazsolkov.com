<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LinkedList on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/linkedlist/</link>
    <description>Recent content in LinkedList on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 26 Mar 2025 20:31:09 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/linkedlist/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>143. Reorder List - LeetCode</title>
      <link>http://localhost:1313/posts/143.reorderlist/</link>
      <pubDate>Wed, 26 Mar 2025 20:31:09 +0100</pubDate>
      <guid>http://localhost:1313/posts/143.reorderlist/</guid>
      <description>Problem Description You are given the head of a singly linked-list. The list can be represented as:&#xA;$L_0 → L_1 → … → L_(n - 1) → L_n$ Reorder the list to be on the following form:&#xA;L_0 → L_n → L_1 → L_(n - 1) → L_2 → L_(n - 2) → … You may not modify the values in the list&amp;rsquo;s nodes. Only nodes themselves may be changed.</description>
    </item>
    <item>
      <title>206. Reverse Linked List - LeetCode</title>
      <link>http://localhost:1313/posts/206.reverselinkedlist/</link>
      <pubDate>Wed, 26 Mar 2025 20:21:57 +0100</pubDate>
      <guid>http://localhost:1313/posts/206.reverselinkedlist/</guid>
      <description>Problem Description Given the head of a singly linked list, reverse the list, and return the reversed list.&#xA;Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] Example 2: Input: head = [1,2] Output: [2,1] My Idea The idea here is to traverse the linked list and for every element reverse the direction of the link.&#xA;My solution from typing import Optional # Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.</description>
    </item>
    <item>
      <title>141. Linked List Cycle - LeetCode</title>
      <link>http://localhost:1313/posts/141.linkedlistcycle/</link>
      <pubDate>Wed, 26 Mar 2025 20:20:11 +0100</pubDate>
      <guid>http://localhost:1313/posts/141.linkedlistcycle/</guid>
      <description>Problem Description Given head, the head of a linked list, determine if the linked list has a cycle in it.&#xA;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail&amp;rsquo;s next pointer is connected to. Note that pos is not passed as a parameter.</description>
    </item>
    <item>
      <title>21. Merge Two Soted Lists - LeetCode</title>
      <link>http://localhost:1313/posts/21.mergetwosotedlists/</link>
      <pubDate>Wed, 26 Mar 2025 20:17:02 +0100</pubDate>
      <guid>http://localhost:1313/posts/21.mergetwosotedlists/</guid>
      <description>Problem Description You are given the heads of two sorted linked lists list1 and list2.&#xA;Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.&#xA;Return the head of the merged linked list.&#xA;Example 1: Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: list1 = [], list2 = [0] Output: [0] My Idea The idea here is to check which element has a lower value and set it as the next one in the list.</description>
    </item>
  </channel>
</rss>
