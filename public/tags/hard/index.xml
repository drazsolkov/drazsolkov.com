<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hard on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/hard/</link>
    <description>Recent content in Hard on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Apr 2025 10:20:15 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/hard/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>25. Reverse Nodes In K-Group - Leet Code</title>
      <link>http://localhost:1313/posts/25.reversenodesinkgroup/</link>
      <pubDate>Thu, 03 Apr 2025 10:20:15 +0200</pubDate>
      <guid>http://localhost:1313/posts/25.reversenodesinkgroup/</guid>
      <description>Problem Description Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.&#xA;k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.&#xA;You may not alter the values in the list&amp;rsquo;s nodes, only nodes themselves may be changed.</description>
    </item>
    <item>
      <title>23. Merge K Sorted Lists - LeetCode</title>
      <link>http://localhost:1313/posts/23.mergeksortedlists/</link>
      <pubDate>Tue, 01 Apr 2025 11:28:31 +0200</pubDate>
      <guid>http://localhost:1313/posts/23.mergeksortedlists/</guid>
      <description>Problem Description You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.&#xA;Merge all the linked-lists into one sorted linked-list and return it.&#xA;Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Example 2: Input: [] Output: [] My Idea My initial idea was to simply iterate over the list and merge the elements one by one. This yielded a time complexity of O(n*k). To optimize this approach we can go ahead and merge the list in twos until we get one list.</description>
    </item>
    <item>
      <title>76. Minimum Window Substring - LeetCode</title>
      <link>http://localhost:1313/posts/76.minimumwindowsubstring/</link>
      <pubDate>Tue, 25 Mar 2025 16:46:05 +0100</pubDate>
      <guid>http://localhost:1313/posts/76.minimumwindowsubstring/</guid>
      <description>Problem Description Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string &amp;quot;&amp;quot;.&#xA;The testcases will be generated such that the answer is unique.&#xA;Example 1: Input: s = &amp;quot;ADOBECODEBANC&amp;quot;, t = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot; Explanation: The minimum window substring &amp;quot;BANC&amp;quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.</description>
    </item>
    <item>
      <title>239. Sliding Window Maximum - LeetCode</title>
      <link>http://localhost:1313/posts/239.slidingwindowmaximum/</link>
      <pubDate>Tue, 25 Mar 2025 16:43:53 +0100</pubDate>
      <guid>http://localhost:1313/posts/239.slidingwindowmaximum/</guid>
      <description>Problem Description You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.&#xA;Return the max of the sliding window.&#xA;Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Example 2: Input: nums = [1], k = 1 Output: [1] My Idea The initial idea was simply to check for the max element in each window and add it to the resulting list.</description>
    </item>
    <item>
      <title>4. Median of Two Sorted Arrays - Leet Code</title>
      <link>http://localhost:1313/posts/4.medianoftwosortedarrays/</link>
      <pubDate>Wed, 05 Mar 2025 13:40:42 +0100</pubDate>
      <guid>http://localhost:1313/posts/4.medianoftwosortedarrays/</guid>
      <description>Problem Description Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.&#xA;The overall run time complexity should be O(log (m+n)).&#xA;Example 1: Input: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2. Example 2: Input: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.</description>
    </item>
    <item>
      <title>42. Trapping Rain Water - LeetCode</title>
      <link>http://localhost:1313/posts/42.trappingrainwater/</link>
      <pubDate>Tue, 25 Feb 2025 14:01:44 +0100</pubDate>
      <guid>http://localhost:1313/posts/42.trappingrainwater/</guid>
      <description>Problem Description Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.&#xA;Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 My Idea For each position in the resulting figure the amount of water that can be trapped is the minimum of the two highest peaks to the left and right minus the height at the position itself.</description>
    </item>
    <item>
      <title>85. Longest Rectangle in Histogram - Leet Code</title>
      <link>http://localhost:1313/posts/85.longestrectangleinhistogram/</link>
      <pubDate>Tue, 08 Oct 2024 11:08:08 +0200</pubDate>
      <guid>http://localhost:1313/posts/85.longestrectangleinhistogram/</guid>
      <description>Problem Description Given an array of integers heights, representing the histogram&amp;rsquo;s bar height, where the width of each bar is 1, return the area of the largest rectangle in the histogram.&#xA;Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. Example 2: Input: heights = [2,4] Output: 4 My Idea Here we once more make use of a stack to keep track of the bars.</description>
    </item>
  </channel>
</rss>
