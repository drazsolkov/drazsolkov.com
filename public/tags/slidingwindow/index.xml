<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SlidingWindow on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/slidingwindow/</link>
    <description>Recent content in SlidingWindow on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Mar 2025 16:46:05 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/slidingwindow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>76. Minimum Window Substring - LeetCode</title>
      <link>http://localhost:1313/posts/76.minimumwindowsubstring/</link>
      <pubDate>Tue, 25 Mar 2025 16:46:05 +0100</pubDate>
      <guid>http://localhost:1313/posts/76.minimumwindowsubstring/</guid>
      <description>Problem Description Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string &amp;quot;&amp;quot;.&#xA;The testcases will be generated such that the answer is unique.&#xA;Example 1: Input: s = &amp;quot;ADOBECODEBANC&amp;quot;, t = &amp;quot;ABC&amp;quot; Output: &amp;quot;BANC&amp;quot; Explanation: The minimum window substring &amp;quot;BANC&amp;quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.</description>
    </item>
    <item>
      <title>239. Sliding Window Maximum - LeetCode</title>
      <link>http://localhost:1313/posts/239.slidingwindowmaximum/</link>
      <pubDate>Tue, 25 Mar 2025 16:43:53 +0100</pubDate>
      <guid>http://localhost:1313/posts/239.slidingwindowmaximum/</guid>
      <description>Problem Description You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.&#xA;Return the max of the sliding window.&#xA;Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Example 2: Input: nums = [1], k = 1 Output: [1] My Idea The initial idea was simply to check for the max element in each window and add it to the resulting list.</description>
    </item>
    <item>
      <title>567. Permutation In String - LeetCode</title>
      <link>http://localhost:1313/posts/567.permutationinstring/</link>
      <pubDate>Tue, 25 Mar 2025 16:42:34 +0100</pubDate>
      <guid>http://localhost:1313/posts/567.permutationinstring/</guid>
      <description>Problem Description Given two strings s1 and s2, return True if s2 contains a permutation of s1, or False otherwise.&#xA;In other words, return True if one of s1&#39;s permutations is the substring of s2.&#xA;Example 1: Input: s1 = &amp;quot;ab&amp;quot;, s2 = &amp;quot;eidbaooo&amp;quot; Output: True Explanation: s2 contains one permutation of s1 (&amp;quot;ba&amp;quot;). Example 2: Input: s1 = &amp;quot;ab&amp;quot;, s2 = &amp;quot;eidboaoo&amp;quot; Output: False My Idea The idea here was to set a window size of len(s1) and check the frequency hashmap of the characters in the window of s2 against the one for s1.</description>
    </item>
    <item>
      <title>424. Longest Repeating Character Replacement - LeetCode</title>
      <link>http://localhost:1313/posts/424.longestrepeatingcharacterreplacement/</link>
      <pubDate>Tue, 25 Mar 2025 16:40:25 +0100</pubDate>
      <guid>http://localhost:1313/posts/424.longestrepeatingcharacterreplacement/</guid>
      <description>Problem Description You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.&#xA;Return the length of the longest substring containing the same letter you can get after performing the above operations.&#xA;Example 1: Input: s = &amp;quot;ABAB&amp;quot;, k = 2 Output: 4 Explanation: Replace the two &#39;A&#39;s with two &#39;B&#39;s or vice versa.</description>
    </item>
    <item>
      <title>3. Longest Substring Without Repeating Character - Leet Code</title>
      <link>http://localhost:1313/posts/3.longestsubstringwithoutrepeatingcharacter/</link>
      <pubDate>Thu, 13 Mar 2025 12:58:41 +0100</pubDate>
      <guid>http://localhost:1313/posts/3.longestsubstringwithoutrepeatingcharacter/</guid>
      <description>Problem Description Given a string s, find the length of the longest substring without duplicate characters.&#xA;Example 1: Input: s = &amp;quot;abcabcbb&amp;quot; Output: 3 Example 2: Input: s = &amp;quot;pwwkew&amp;quot; Output: 3 My Idea The idea here is to utilize the Sliding Window approach. In every step we increase the window to the right. If we encounter a character that&amp;rsquo;s already a part of the current substring (window), we shorten from the left until the original instance is just outside of the window.</description>
    </item>
    <item>
      <title>121. Best Time to Buy and Sell Stock - LeetCode</title>
      <link>http://localhost:1313/posts/121.besttimetobuyandsellstock/</link>
      <pubDate>Thu, 06 Mar 2025 13:33:46 +0100</pubDate>
      <guid>http://localhost:1313/posts/121.besttimetobuyandsellstock/</guid>
      <description>Problem Description You are given an array prices where prices[i] is the price of a given stock on the i-th` day.&#xA;You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.&#xA;Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.&#xA;Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</description>
    </item>
  </channel>
</rss>
