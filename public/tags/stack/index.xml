<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on Denis Razsolkov</title>
    <link>http://localhost:1313/tags/stack/</link>
    <description>Recent content in Stack on Denis Razsolkov</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 08 Oct 2024 11:08:08 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>85. Longest Rectangle in Histogram - Leet Code</title>
      <link>http://localhost:1313/posts/85.longestrectangleinhistogram/</link>
      <pubDate>Tue, 08 Oct 2024 11:08:08 +0200</pubDate>
      <guid>http://localhost:1313/posts/85.longestrectangleinhistogram/</guid>
      <description>Problem Description Given an array of integers heights, representing the histogram&amp;rsquo;s bar height, where the width of each bar is 1, return the area of the largest rectangle in the histogram.&#xA;Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. Example 2: Input: heights = [2,4] Output: 4 My Idea Here we once more make use of a stack to keep track of the bars.</description>
    </item>
    <item>
      <title>853. Car Fleet - Leet Code</title>
      <link>http://localhost:1313/posts/853.carfleet/</link>
      <pubDate>Wed, 02 Oct 2024 14:02:09 +0200</pubDate>
      <guid>http://localhost:1313/posts/853.carfleet/</guid>
      <description>Problem Description There are n cars at given miles away from the starting mile 0, traveling to reach the mile target.&#xA;You are given two integer array position and speed, both of length n, where position[i] is the starting mile of the i-th car and speed[i] is the speed of the i-th car in miles per hour.&#xA;A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car.</description>
    </item>
    <item>
      <title>150. Evaluate Reverse Polish Notation - LeetCode</title>
      <link>http://localhost:1313/posts/150.evaluatereversepolishnotation/</link>
      <pubDate>Tue, 01 Oct 2024 10:59:31 +0200</pubDate>
      <guid>http://localhost:1313/posts/150.evaluatereversepolishnotation/</guid>
      <description>Problem Description You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.&#xA;Evaluate the expression. Return an integer that represents the value of the expression.&#xA;Note that:&#xA;The valid operators are &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39;. Each operand may be an integer or another expression. The division between two integers always truncates toward zero. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation.</description>
    </item>
    <item>
      <title>155. MinStack - LeetCode</title>
      <link>http://localhost:1313/posts/155.minstack/</link>
      <pubDate>Mon, 30 Sep 2024 10:46:12 +0200</pubDate>
      <guid>http://localhost:1313/posts/155.minstack/</guid>
      <description>Problem Description Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.&#xA;Implement the MinStack class:&#xA;MinStack() initializes the stack object. void push(int val) pushes the element val onto the stack. void pop() removes the element on the top of the stack. int top() gets the top element of the stack. int getMin() retrieves the minimum element in the stack. You must implement a solution with O(1) time complexity for each function.</description>
    </item>
    <item>
      <title>739. Daily Temperatures - LeetCode</title>
      <link>http://localhost:1313/posts/739.dailytemperatures/</link>
      <pubDate>Sun, 11 Aug 2024 18:42:48 +0200</pubDate>
      <guid>http://localhost:1313/posts/739.dailytemperatures/</guid>
      <description>Problem Description Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.&#xA;Example 1: Input: temperatures = [73,74,75,71,69,72,76,73] Output: [1,1,4,2,1,1,0,0] Example 2: Input: temperatures = [30,40,50,60] Output: [1,1,1,0] My Idea The idea here is to construct a stack of monotonically decreasing values.</description>
    </item>
    <item>
      <title>22. Generate Parentheses - LeetCode</title>
      <link>http://localhost:1313/posts/22.generateparentheses/</link>
      <pubDate>Fri, 09 Aug 2024 22:01:42 +0200</pubDate>
      <guid>http://localhost:1313/posts/22.generateparentheses/</guid>
      <description>Problem Description Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&#xA;Example 1: Input: n = 3 Output: [&amp;quot;((()))&amp;quot;,&amp;quot;(()())&amp;quot;,&amp;quot;(())()&amp;quot;,&amp;quot;()(())&amp;quot;,&amp;quot;()()()&amp;quot;] Example 2: Input: n=1 Output: [&amp;quot;()&amp;quot;] My Idea The idea here is that as seen in 20. Valid Parentheses for the parentheses to be well-formed, we need the number of opening ones to match the number of closing ones. Since there are different possible combinations for the parentheses, we use recursion and backtracking.</description>
    </item>
    <item>
      <title>20. Valid Parentheses - LeetCode</title>
      <link>http://localhost:1313/posts/20.validparentheses/</link>
      <pubDate>Fri, 09 Aug 2024 21:23:04 +0200</pubDate>
      <guid>http://localhost:1313/posts/20.validparentheses/</guid>
      <description>Problem Description Given a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.&#xA;An input string is valid if:&#xA;Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.&#xA;Example 1: Input: s = &amp;quot;()&amp;quot; Output: True Example 2: Input: s = &amp;quot;()[]{}&amp;quot; Output: True Example 3: Input: s = &amp;quot;(]&amp;quot; Output: False My Idea The idea here is to use a list as a stack, taking advantage of the LIFO strategy.</description>
    </item>
  </channel>
</rss>
